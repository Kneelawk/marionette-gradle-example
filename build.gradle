plugins {
	id 'fabric-loom' version '0.5-SNAPSHOT'
	id 'maven-publish'
	id 'com.kneelawk.marionette-gradle' version '0.1.0-SNAPSHOT'
}

sourceCompatibility = JavaVersion.VERSION_1_8
targetCompatibility = JavaVersion.VERSION_1_8

archivesBaseName = project.archives_base_name
version = project.mod_version
group = project.maven_group

repositories {
	mavenLocal()
}

dependencies {
	// To change the versions see the gradle.properties file
	minecraft "com.mojang:minecraft:${project.minecraft_version}"
	mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"
	modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"

	// Fabric API. This is technically optional, but you probably want it anyway.
	modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"

	// PSA: Some older mods, compiled on Loom 0.2.1, might have outdated Maven POMs.
	// You may need to force-disable transitiveness on them.

	modRuntime("io.github.prospector:modmenu:1.14.9+build.14") {
		exclude group: "net.fabricmc.fabric-api"
	}

	marionetteTestImplementation 'org.junit.jupiter:junit-jupiter-api:5.7.0'
	marionetteTestRuntime 'org.junit.jupiter:junit-jupiter-engine:5.7.0'
}

processResources {
	inputs.property "version", project.version

	filesMatching("fabric.mod.json") {
		expand "version": project.version
	}
}

tasks.withType(JavaCompile).configureEach {
	// ensure that the encoding is set to UTF-8, no matter what the system default is
	// this fixes some edge cases with special characters not displaying correctly
	// see http://yodaconditions.net/blog/fix-for-java-file-encoding-problems-with-gradle.html
	// If Javadoc is generated, this must be specified in that task too.
	it.options.encoding = "UTF-8"

	// The Minecraft launcher currently installs Java 8 for users, so your mod probably wants to target Java 8 too
	// JDK 9 introduced a new way of specifying this that will make sure no newer classes or methods are used.
	// We'll use that if it's available, but otherwise we'll use the older option.
	def targetVersion = 8
	if (JavaVersion.current().isJava9Compatible()) {
		 it.options.release = targetVersion
	}
}

java {
	// Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task
	// if it is present.
	// If you remove this line, sources will not be generated.
	withSourcesJar()
}

jar {
	from("LICENSE") {
		rename { "${it}_${project.archivesBaseName}"}
	}
}

// configure the maven publication
publishing {
	publications {
		mavenJava(MavenPublication) {
			// add all the jars that should be included when publishing to maven
			artifact(remapJar) {
				builtBy remapJar
			}
			artifact(sourcesJar) {
				builtBy remapSourcesJar
			}
		}
	}

	// Select the repositories you want to publish to
	// To publish to maven local, no extra repositories are necessary. Just use the task `publishToMavenLocal`.
	repositories {
		// See https://docs.gradle.org/current/userguide/publishing_maven.html for information on how to set up publishing.
	}
}

marionette {
	useJUnitPlatform()
	testSets {
		marionette {
			commonSignals {
				oneShot 'gameStarted'
			}
			clientQueues {
				gameTick {
					argument 'net.minecraft.client.MinecraftClient'
					argument 'java.lang.String'
					exception 'java.rmi.RemoteException'
				}
			}
			serverQueues {
				gameTick {
					argument 'net.minecraft.server.MinecraftServer'
					argument 'java.lang.String'
				}
			}
			clientProxies {
				proxy('net.minecraft.client.MinecraftClient') {
					method('scheduleStop')
					method('openScreen') {
						argument 'net.minecraft.client.gui.screen.Screen'
					}
				}
				proxy('net.minecraft.client.gui.screen.Screen')
				proxy('net.minecraft.client.gui.screen.TitleScreen') {
					superClass = 'net.minecraft.client.gui.screen.Screen'
					constructor()
				}
				proxy('net.minecraft.client.gui.screen.ConnectScreen') {
					superClass = 'net.minecraft.client.gui.screen.Screen'
					constructor {
						argument 'net.minecraft.client.gui.screen.Screen'
						argument 'net.minecraft.client.MinecraftClient'
						argument 'java.lang.String'
						argument 'int'
					}
				}
			}
			serverProxies {
				proxy('net.minecraft.server.MinecraftServer')
			}
		}
	}
}
